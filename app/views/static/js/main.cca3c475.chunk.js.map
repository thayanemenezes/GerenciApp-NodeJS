{"version":3,"sources":["http-commom.js","services/estabs.service.js","components/addEstabs.js","components/estabsList.js","components/estabs.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","name","addEstabs","props","onChangeName","bind","onChangeCnpj","saveEstab","newEstab","state","cnpj","published","submitted","e","this","setState","target","value","EstabDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","Component","estabsList","onChangeSearchName","retrieveEstabs","refreshList","setActiveEstab","removeAllEstabs","searchName","estabs","currentEstab","currentIndex","getAll","estab","index","deleteAll","findByName","placeholder","map","to","Estab","getEstab","updatePublished","updateEstab","deleteEstab","message","match","params","prevState","status","update","history","push","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.cca3c475.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from '../http-commom';\r\n\r\nclass EstabsDataService {\r\n  getAll() {\r\n    return http.get(\"/estabs\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/estabs/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/estabs\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/estabs/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/estabs/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/estabs`);\r\n  }\r\n\r\n  findByTitle(name) {\r\n    return http.get(`/estabs?name=${name}`);\r\n  }\r\n}\r\n\r\nexport default new EstabsDataService();","import React, { Component } from 'react';\r\nimport EstabDataService from '../services/estabs.service'\r\n\r\nexport default class addEstabs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onChangeName = this.onChangeName.bind(this);\r\n        this.onChangeCnpj = this.onChangeCnpj.bind(this);\r\n        this.saveEstab = this.saveEstab.bind(this);\r\n        this.newEstab = this.newEstab.bind(this);\r\n\r\n        this.state = {\r\n            id: null,\r\n            name: \"\",\r\n            cnpj: \"\",\r\n            published: false,\r\n\r\n            submitted: false\r\n        };\r\n    }\r\n\r\n    onChangeName(e) {\r\n        this.setState({\r\n            name: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangeCnpj(e) {\r\n        this.setState({\r\n            cnpj: e.target.value\r\n        });\r\n    }\r\n\r\n    saveEstab() {\r\n        var data = {\r\n            name: this.state.name,\r\n            cnpj: this.state.cnpj\r\n        };\r\n\r\n        EstabDataService.create(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    id: response.data.id,\r\n                    name: response.data.name,\r\n                    cnpj: response.data.cnpj,\r\n                    published: response.data.published,\r\n\r\n                    submitted: true\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n    newEstab() {\r\n        this.setState({\r\n            id: null,\r\n            name: \"\",\r\n            cnpj: \"\",\r\n            published: false,\r\n\r\n            submitted: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"submit-form\">\r\n            {this.state.submitted ? (\r\n              <div>\r\n                <h4>Estabelecimento cadastrado com sucesso!</h4>\r\n                <button className=\"btn btn-success\" onClick={this.newEstab}>\r\n                    Cadastrar\r\n                </button>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nome</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"name\"\r\n                    required\r\n                    value={this.state.name}\r\n                    onChange={this.onChangeName}\r\n                    name=\"name\"\r\n                  />\r\n                </div>\r\n    \r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cnpj\">CNPJ</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"cnpj\"\r\n                    required\r\n                    value={this.state.cnpj}\r\n                    onChange={this.onChangeCnpj}\r\n                    name=\"cnpj\"\r\n                  />\r\n                </div>\r\n    \r\n                <button onClick={this.saveEstab} className=\"btn btn-success\">\r\n                  Enviar\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n","import React, { Component } from 'react';\r\nimport EstabDataService from '../services/estabs.service';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './estabsList.css'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nexport default class estabsList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchName = this.onChangeSearchName.bind(this);\r\n    this.retrieveEstabs = this.retrieveEstabs.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveEstab = this.setActiveEstab.bind(this);\r\n    this.removeAllEstabs = this.removeAllEstabs.bind(this);\r\n    this.searchName = this.searchName.bind(this);\r\n\r\n    this.state = {\r\n      estabs: [],\r\n      currentEstab: null,\r\n      currentIndex: -1,\r\n      searchName: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveEstabs();\r\n  }\r\n\r\n  onChangeSearchName(e) {\r\n    const searchName = e.target.value;\r\n\r\n    this.setState({\r\n      searchName: searchName\r\n    });\r\n  }\r\n\r\n  retrieveEstabs() {\r\n    EstabDataService.getAll()\r\n      .then(response => {\r\n        this.setState({\r\n          estabs: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveEstabs();\r\n    this.setState({\r\n      currentEstab: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveEstab(estab, index) {\r\n    this.setState({\r\n      currentEstab: estab,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  removeAllEstabs() {\r\n    EstabDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchName() {\r\n    EstabDataService.findByName(this.state.searchName)\r\n      .then(response => {\r\n        this.setState({\r\n          estabs: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { searchName, estabs, currentEstab, currentIndex } = this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Pesquisar\"\r\n              value={searchName}\r\n              onChange={this.onChangeSearchName}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchName}\r\n              >\r\n                <SearchIcon/>\r\n                \r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Estabelecimentos cadastrados</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {estabs &&\r\n              estabs.map((estab, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveEstab(estab, index)}\r\n                  key={index}\r\n                >\r\n                  {estab.name}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllEstabs}\r\n          >\r\n            Excluir todos\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentEstab ? (\r\n            <div>\r\n              <h4>Estab</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Nome:</strong>\r\n                </label>{\" \"}\r\n                {currentEstab.name}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>CNPJ</strong>\r\n                </label>{\" \"}\r\n                {currentEstab.cnpj}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentEstab.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/estabs/\" + currentEstab.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Editar\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Escolha um estabelecimento...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport EstabDataService from \"../services/estabs.service\";\r\n\r\nexport default class Estab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeName = this.onChangeName.bind(this);\r\n    this.onChangeCnpj = this.onChangeCnpj.bind(this);\r\n    this.getEstab = this.getEstab.bind(this);\r\n    this.updatePublished = this.updatePublished.bind(this);\r\n    this.updateEstab = this.updateEstab.bind(this);\r\n    this.deleteEstab = this.deleteEstab.bind(this);\r\n\r\n    this.state = {\r\n      currentEstab: {\r\n        id: null,\r\n        name: \"\",\r\n        cnpj: \"\",\r\n        published: false\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getEstab(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeName(e) {\r\n    const name = e.target.value;\r\n\r\n    this.setState(function(prevState) {\r\n      return {\r\n        currentEstab: {\r\n          ...prevState.currentEstab,\r\n          name: name\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeCnpj(e) {\r\n    const cnpj = e.target.value;\r\n    \r\n    this.setState(prevState => ({\r\n      currentEstab: {\r\n        ...prevState.currentEstab,\r\n        cnpj: cnpj\r\n      }\r\n    }));\r\n  }\r\n\r\n  getEstab(id) {\r\n    EstabDataService.get(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentEstab: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePublished(status) {\r\n    var data = {\r\n      id: this.state.currentEstab.id,\r\n      name: this.state.currentEstab.name,\r\n      cnpj: this.state.currentEstab.cnpj,\r\n      published: status\r\n    };\r\n\r\n    EstabDataService.update(this.state.currentEstab.id, data)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          currentEstab: {\r\n            ...prevState.currentEstab,\r\n            published: status\r\n          }\r\n        }));\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateEstab() {\r\n    EstabDataService.update(\r\n      this.state.currentEstab.id,\r\n      this.state.currentEstab\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"Dados atualizados com sucesso!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteEstab() {    \r\n    EstabDataService.delete(this.state.currentEstab.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/estabs')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentEstab } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentEstab ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Estabelecimentos</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"title\">Nome</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"Name\"\r\n                  value={currentEstab.name}\r\n                  onChange={this.onChangeName}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"cnpj\">CNPJ</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"cnpj\"\r\n                  value={currentEstab.cnpj}\r\n                  onChange={this.onChangeCnpj}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentEstab.published ? \"Published\" : \"Pending\"}\r\n              </div>\r\n            </form>\r\n\r\n            {currentEstab.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(false)}\r\n              >\r\n                Cancelar\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(true)}\r\n              >\r\n                Enviar\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.deleteEstab}\r\n            >\r\n              Excluir\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateEstab}\r\n            >\r\n              Atualizar\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Escolha um estabelecimento...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n  );\r\n}\r\n}","import React, {Component} from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nimport addEstabs from './components/addEstabs';\nimport estabsList from './components/estabsList';\nimport estabs from './components/estabs';\n\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <nav className=\"navbar navbar-expand\">\n          <a href=\"#\" className=\"navbar-brand\">\n            GerenciApp :)\n          </a>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/estabs\"} className=\"nav-link\">\n                Estabelecimentos\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Cadastrar\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/estabs\"]} component={estabsList} />\n            <Route exact path=\"/add\" component={addEstabs} />\n            <Route path=\"/estabs/:id\" component={estabs} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}